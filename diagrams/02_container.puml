@startuml
!include C4_Container.puml

title Container diagram for DIDroom

Person(org, "Organization manager", "A user, representing an organization, that uses DIDRoom: they can setup credentials issuance and verification flows, invite users or appoint users to roles in the organization")
Person(user, "DIDroom wallet holder", "An invidual who holds credentials (EUDI-ARF and/or W3C-VC) and/or SSI identities (EUDI-ARF and/or W3C-DID). Credentials and identities can be issued via DIDroom or 3rd parties")
Person(verifier, "Verifier", "An invidual who verifies credentials (EUDI-ARF and/or W3C-VC). The verifier may have a W3C-DID and credentials issued via DIDroom, or via 3rd parties")

System_Boundary(didroom_microservices, "Zenswarm microservices") {
  System_Ext(issuer, "Credential issuer (Zenswarm or 3rd party)", "A microservice issuing verifiable credentials (EUDI-ARF and/or W3C-VC)")
  System_Ext(relying_party, "Relying party (Zenswarm or 3rd party)", "Microservice verifying verifiable presentations (EUDI-ARF and W3C-VC). Receives a transaction ID in the request from the holder, the transaction ID is generated by the verifier app")
  System_Ext(auth_server, "Authorization server (Zenswarm OR 3rd party software)", "Microservice that verifies the claim of a holder requesting a credential. It issues an `access token` after the holder's request, the access token is sent to the **credential issuer** as an authorization to issue the requested credential")
}

System_Ext(did, "Dyne.org W3C-DID", "Federated 4-levels W3C-DID method with multiple storage mechanisms (DB, Git, blockchain, REDIS, IPFS, file system)")

System_Boundary(didroom_solution, "DIDroom") {
  Container(wallet, "Holder wallet App", "nativescript, Zenroom WASM, svelte, android, iOS", "A hybrid mobile app that holds an identity (EUDI-ARF and/or W3C-DID), requests verifiable credentials (EUDI-ARF and/or W3C-VC) and presents verifiable presentations (EUDI-ARF and/or W3C-VC)")
  Container(didroom, "DIDroom dashboard", "Typescript, Zenroom WASM, golang", "Web-based application, enables setup of organization managers' and users' identities, credentials issueing and verification flows (using Zenswarm microservices or 3rd party services), provisioning and monitoring of Zenwarm microservices, and view audit logs")
  Container(didroom_backend, "DIDroom backend", "Zenroom, golang", "Exposes REST APIs to allow internal and 3rd party software to consume the various identification/verification/RBAC services.")
  ContainerDb(db, "DIDroom DB", "Distributed Sqlite Database", "Stores JUST public and NON sensitive data, like settings, schemas and commodities for the dashboard usage")
  Container(verifier_app, "Verifier App", "nativescript, Zenroom WASM, svelte, android, iOS", "A hybrid mobile app that triggers a credential verification flow (EUDI-ARF and/or W3C-VC), optionally holds an identity (EUDI-ARF and/or W3C-DID) and credentials (EUDI-ARF and/or W3C-VC).")
}



Rel_R(didroom, db, "Reads from and writes to", "sync, JDBC")
Rel_R(didroom_backend, db, "Reads only", "sync, JDBC")
Rel(user, wallet, "Compliant", "EUDI/ARF")
Rel(verifier, verifier_app, "Compliant", "EUDI/ARF")
Rel(relying_party, verifier_app, "Compliant", "EUDI/ARF")
Rel_Neighbor(wallet, relying_party, "Verifiable presentation", "EUDI/ARF")
Rel_R(wallet, auth_server, "Ask", "Authorization token")
Rel(auth_server, wallet , "Send", "Authorization token")
Rel_R(wallet, issuer, "Send", "Authorization token")
Rel(issuer, wallet, "Issuance", "Verifiable credential and sd-jwt")


Rel(org, didroom, "Interacts", "define deploy manage services")
Rel(didroom, did, "Uses", "DID Documents")
Rel(verifier_app, did, "Uses", "DID Documents")
Rel(didroom_backend, did, "Uses", "DID Documents")
Rel(wallet, did, "Uses", "DID Documents")

Lay_L(didroom_backend, db)

SHOW_LEGEND()
@enduml
