@startuml
!include C4_Container.puml

title Container diagram for Forkbomb Wallet ID and credential 

Person(user, "Wallet User", "An invidual who installs the DIDroom identity wallet, will request and receive verifiable credentials")
Person(verifier, "Verifier User", "A DHS agent, a U.S. govt. official or any individual who needs to verify verifiable credentials")



System_Boundary(didroom, "DIDroom") {
  ContainerDb(db, "Database", "Distributed Sqlite Database", "Stores public and non-sensitive data, like settings, schemas and commodities for the admin dashboard")
  Container(didroom_backend, "DIDroom backend", "Zenroom, golang", "Backoffice of the DIDroom wallet. It performs verifier users/apps provisioning and management, records interactions, storse deployment and audit logs. Exposes REST API for third party interoperability.")
  Container(wallet, "Wallet App", "Nativescript, Zenroom, Svelte, android/iOS hybrid app", "Performs cryptographic operations and requests, stores and display/serves W3C-DIDs, W3C-VCs and BBS proofs ")
  Container(verifier_app, "Verifier App", "Nativescript, Zenroom, Svelte, android/iOS hybrid app", "Checks credential status list and performs cryptographic W3C-VCs and BBS proof verifications. Provisioning is optionally governed by the DIDroom backend.")
}


System_Ext(did, "W3C-DID service (did:dyne)", "Federated 4-levels W3C-DID method with multiple storage mechanisms, such as Git and IPFS")
System_Ext(zenswarm, "Zenswarm", "Microservice and blockchain oracle, perform cryptography, interoperability, data storage/caching. Each instance has its own DID and produces signed output.")
System_Ext(service, "Isolated credential issuing microservice", "Produces signed W3C-VCs, BBS signatures, cryptographic operations. Based on Zenswarm, has its own DID and produces signed output.")

Rel(user, wallet, "Compliant", "W3C-DID/VC, BBS, EUDI/ARF")
Rel(verifier, verifier_app, "Compliant", "W3C-DID/VC, BBS, EUDI/ARF")
Rel(verifier_app, didroom_backend, "Provisioning", "Data storage")
Rel(service, wallet, "Produces", "W3C-VCs, BBS signatures")


Rel_Back(service, didroom_backend, "Consume", "REST/API")
Rel_Back(db, didroom_backend, "Read/Write", "sync, JDBC")

Rel(didroom_backend, did, "Uses", "DID Documents")
Rel_Back(wallet, did, "Uses", "DID Documents")
Rel_Back(verifier_app, did, "Uses", "DID Documents")
Rel(didroom_backend, zenswarm, "Uses")

SHOW_LEGEND()
@enduml
