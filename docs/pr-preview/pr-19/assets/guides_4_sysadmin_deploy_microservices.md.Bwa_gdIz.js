import{_ as e,c as a,o as s,a3 as i}from"./chunks/framework.Dcugq_a2.js";const t="/assets/microservices-manual-deployment.C-eavNez.png",g=JSON.parse('{"title":"Deploy microservices","description":"","frontmatter":{},"headers":[],"relativePath":"guides/4_sysadmin/deploy_microservices.md","filePath":"guides/4_sysadmin/deploy_microservices.md","lastUpdated":1724932827000}'),o={name:"guides/4_sysadmin/deploy_microservices.md"},r=i('<h1 id="deploy-microservices" tabindex="-1">Deploy microservices <a class="header-anchor" href="#deploy-microservices" aria-label="Permalink to &quot;Deploy microservices&quot;">‚Äã</a></h1><h4 id="for-üõ†Ô∏è-system-administrator" tabindex="-1">for üõ†Ô∏è System Administrator <a class="header-anchor" href="#for-üõ†Ô∏è-system-administrator" aria-label="Permalink to &quot;for üõ†Ô∏è System Administrator&quot;">‚Äã</a></h4><p><a href="/solution.html#didroom-microservices">DIDroom Microservices</a> are the technological core of the solution: those components offer cryptographic functions as well as transport protocols. The microservices are completely isolated from the Dashboard, meaning that:</p><ul><li>The code is hosted in a separated repo</li><li>The microservices can run independently from the Dashboard</li><li>Each microservice has its own secret keys and DID to identify them: those are generated by the microservice at its first provisioning</li><li>The <em>Credential Issuer</em> and <em>Authorization Server</em> microservices, contain the custom code you defined in the respective templates</li></ul><h2 id="preparation" tabindex="-1">Preparation <a class="header-anchor" href="#preparation" aria-label="Permalink to &quot;Preparation&quot;">‚Äã</a></h2><ol><li><p>Register a domain name, like <em>myapp.com</em> and ideally register 3 subdomains as:</p><ul><li><em>issuer.myapp.com</em></li><li><em>authz.myapp.com</em></li><li><em>rp.myapp.com</em></li></ul></li><li><p>Setup a linux server, configure TLS and make sure the server is resolved at: <a href="https://myapp.com/" target="_blank" rel="noreferrer">https://myapp.com/</a> or ideally to the 3 subdomains as above. You&#39;ll need to setup a reverse proxy (more about it later).</p></li><li><p>Make sure you have all the commands installed, type:</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div><h2 id="provision-and-download-the-microservices" tabindex="-1">Provision and download the Microservices <a class="header-anchor" href="#provision-and-download-the-microservices" aria-label="Permalink to &quot;Provision and download the Microservices&quot;">‚Äã</a></h2><ul><li>Go to <a href="https://dashboard.didroom.com" target="_blank" rel="noreferrer">https://dashboard.didroom.com</a> and create at least an Issuance Flow. During the creation, you will have to create multiple objects, such as templates and setup microservices.</li><li>Then From the <em>Microservices</em> page, click on &quot;Download microservices&quot;</li><li>The Microservices page should look like this:</li></ul><p><img src="'+t+`" alt="Microservices-manual-deployment"></p><h2 id="download-and-deploy-the-microservices" tabindex="-1">Download and deploy the Microservices <a class="header-anchor" href="#download-and-deploy-the-microservices" aria-label="Permalink to &quot;Download and deploy the Microservices&quot;">‚Äã</a></h2><ol><li><p>Copy the microservices.zip file on the server and unzip it, it should create multiple folders, one for each microservice you configured and used in the dashboard. Assuming that you have 3 microservices named <em>my-issuer</em>, <em>my-authz</em>, <em>my-rp</em> then do:</p></li><li><p>type:</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  my-issuer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p>And <strong>repeat this</strong> for each of the 3 microservices. The <em>make up</em> command generates the secret keys for the microservices, and registers a DID for each of them</p><p>From that moment, you should have the microservices (authz_server, credential_issuer and relying_party) configured and running, on the port you have configured in the dashboard.</p><h1 id="reverse-proxy-with-caddy" tabindex="-1">Reverse proxy (with Caddy) <a class="header-anchor" href="#reverse-proxy-with-caddy" aria-label="Permalink to &quot;Reverse proxy (with Caddy)&quot;">‚Äã</a></h1><p>The OpenID4VCI and OpenID4VP protocols dictate the use of TLS, so you&#39;ll need to be able to access each microservice via <em>https://</em></p><p>There are multiple ways to do this, using e.g. Nginx. We recommend using <a href="https://caddyserver.com/" target="_blank" rel="noreferrer">Caddy</a> at least in test environments as it&#39;s easy and fast to configure.</p><div class="important custom-block github-alert"><p class="custom-block-title">Important:</p><p>While you configure and test Caddy, the microservices must all be running already, at the correct ports, because Caddy will try to bind the ports when it&#39;s started (or reloaded). So <strong>make sure you have the microservices running</strong> before you go into this section.</p></div><h4 id="install-caddy" tabindex="-1">Install Caddy <a class="header-anchor" href="#install-caddy" aria-label="Permalink to &quot;Install Caddy&quot;">‚Äã</a></h4><p>To install <em>Caddy</em> check the <a href="https://caddyserver.com/docs/install" target="_blank" rel="noreferrer">documentation</a> or try your luck with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> caddy</span></span></code></pre></div><h4 id="caddy-config-file" tabindex="-1">Caddy config file <a class="header-anchor" href="#caddy-config-file" aria-label="Permalink to &quot;Caddy config file&quot;">‚Äã</a></h4><p>To edit Caddy config file, do :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/caddy/Caddyfile</span></span></code></pre></div><h3 id="setup-caddy-with-3-subdomains" tabindex="-1">Setup Caddy with 3 subdomains <a class="header-anchor" href="#setup-caddy-with-3-subdomains" aria-label="Permalink to &quot;Setup Caddy with 3 subdomains&quot;">‚Äã</a></h3><p>If you have 3 subdomains, assuming that the microservices are running on the ports 3001, 3002 and 3003, add to <em>Caddyfile</em>:</p><div class="language-caddy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">caddy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>issuer.myapp.com {</span></span>
<span class="line"><span>        reverse_proxy http://localhost:3001</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>authz.myapp.com {</span></span>
<span class="line"><span>        reverse_proxy http://localhost:3002</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>rp.myapp.com {</span></span>
<span class="line"><span>        reverse_proxy http://localhost:3003</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="setup-caddy-with-1-domain" tabindex="-1">Setup Caddy with 1 domain <a class="header-anchor" href="#setup-caddy-with-1-domain" aria-label="Permalink to &quot;Setup Caddy with 1 domain&quot;">‚Äã</a></h3><p>If you only have configured 1 domain, for example <em>myapp.com</em> then add to <em>Caddyfile</em></p><div class="language-caddy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">caddy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>myapp.com {</span></span>
<span class="line"><span>	reverse_proxy /credential_issuer/* :3001</span></span>
<span class="line"><span>	reverse_proxy /authz_server/* :3002</span></span>
<span class="line"><span>	reverse_proxy /relying_party/* :3003</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="important custom-block github-alert"><p class="custom-block-title">Note:</p><p>Using a single domain for all the microservices, with this configuration, won&#39;t allow you to use the <a href="https://swagger.io/" target="_blank" rel="noreferrer">Swagger</a> to test the microservices. The Swagger is available at the <em>/docs</em> route, configuring it&#39;s access is possible but more complicated.</p></div><h2 id="receive-your-first-credential" tabindex="-1">Receive your first credential <a class="header-anchor" href="#receive-your-first-credential" aria-label="Permalink to &quot;Receive your first credential&quot;">‚Äã</a></h2><p>After you have deployed your microservice, you are ready to receive your first verifiable credential!</p><ul><li>install the wallet on an android phone from here: <a href="https://github.com/ForkbombEu/wallet" target="_blank" rel="noreferrer">https://github.com/ForkbombEu/wallet</a> (you can scan the QR code on the github repo),</li><li>create a user on the wallet (or log in with the user you created on dashboard.didroom.com)</li><li>scan the QR code you see in the Issuance Flow page (alternatively, if you log in using the dashboard user, you should see your credential in the Home of the wallet)</li><li>If everything worked well, you should see something like this in the wallet:</li></ul><p><img src="https://github.com/ForkbombEu/DIDroom/assets/1547175/8bfef092-2423-4cb7-9320-b3d54cbd03cc" alt="wallet (Medium)"></p>`,36),n=[r];function l(d,p,h,c,m,u){return s(),a("div",null,n)}const v=e(o,[["render",l]]);export{g as __pageData,v as default};
