import{_ as e,c as r,o as t,a3 as i}from"./chunks/framework.Dcugq_a2.js";const f=JSON.parse('{"title":"Verification flow","description":"","frontmatter":{},"headers":[],"relativePath":"guides/6_components/verification.md","filePath":"guides/6_components/verification.md","lastUpdated":1724843479000}'),a={name:"guides/6_components/verification.md"},o=i('<h1 id="verification-flow" tabindex="-1">Verification flow <a class="header-anchor" href="#verification-flow" aria-label="Permalink to &quot;Verification flow&quot;">​</a></h1><p>We are following very close the work of the OpenID Foundation on the <a href="https://openid.net/specs/openid-4-verifiable-presentations-1_0.html" target="_blank" rel="noreferrer">OpenID4VP</a> communication protocol. Since at the time of writing, <em>OpenID4VP</em> is still a draft, we implemented the custom verification flow <strong>DIDroom4VP</strong>.</p><h2 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-label="Permalink to &quot;Basics&quot;">​</a></h2><p>The <em>DIDroom4VP</em> flow involves these main components:</p><ul><li><strong>Wallet</strong>: <a href="https://github.com/ForkbombEu/wallet" target="_blank" rel="noreferrer">DIDroom Wallet</a></li><li><strong>Verifier</strong>: <a href="https://github.com/ForkbombEu/verifier" target="_blank" rel="noreferrer">DIDroom Verifier</a></li><li><strong>Relying_Party</strong>: a microservices contained in <a href="https://github.com/ForkbombEu/DIDroom_microservices" target="_blank" rel="noreferrer">DIDroom Microservices</a></li><li><strong>W3C DID Service</strong>: powered by a service running the W3C <a href="https://dyne.org/W3C-DID/" target="_blank" rel="noreferrer">did:dyne</a> method, also see the <a href="https://explorer.did.dyne.org/" target="_blank" rel="noreferrer">DID explorer</a></li></ul><p>We worked on separating the role of the <strong>Relying_Party</strong> (a trusted microservice) with the role of the <strong>Verifier</strong> (a mobile app being managed by a human).</p><p>All the data communication happen directly (REST and response), except the communication between the Relying_Party and the Verifier at the end, which uses Firebase.</p><p>We also use a microservice acting as a bridge between the Relying_Party and Firebase, which we ommitted in the diagram.</p><h2 id="diagram-verification-flow-cross-device" tabindex="-1">Diagram: Verification Flow (Cross Device) <a class="header-anchor" href="#diagram-verification-flow-cross-device" aria-label="Permalink to &quot;Diagram: Verification Flow (Cross Device)&quot;">​</a></h2><img src="https://www.plantuml.com/plantuml/svg/ZPHDZzem48Rl-HNJMpb0kX_zub1j1QgwqbQYGTiUaMCFx6YDdVe3oh_l934qGLcq9oAFtsTctXbyvuDm8MvrzeQCr54XF8LG-McUEx6VR2WynJ9wTDAQW2PCfDtcbHQcrenzK9hAV7OxNjH7ZpyUygtm0HqVhMQi46JGJQgQBsIm3hvRhT1b5ISbIHMBuBVG6aFlg41z8BDPBVZiq8lyGaThEYVSp5Rp-_bgYMv74hEipGBZBmaEKrZMVSAkaKiHo1fOQxk7jyk05RmRPUacQuuvQfKK1duM82qRisSpOE7GimyjOOvhCjHy2gFwPSDZyP3eLrtwgQA5inAzlqZq5wk-xd9JpzCZ3pJv07ODt88Y9GA2TAWuGaBxHBWP3Ng56cNeN8TWeKIeMZAgfBuTp5_WduYScZUcgQEz-tumqrVvREnUezhWsVqFBtcceiGq8b5gxDlNQZzsjVsXrCsnhvVrdqPPNpM0uL__SXtrxF1lSBpqn-rCxCy3xBFzxNZ8aN6jvJ7E_a_Ztll8HgRbgdVt331GRu4XElCguDKhscyQFu2dZH4CHeYUmoTy5KjD4fxnS8HU3q2xVxHwAhqzjp7mMuEDbOgyrDRpuaajQEjXHmA-aSDIy11I1jxb4x0FdvFd9-jmGdBplLG9mEjynsNmO_KF" alt="uml diagram"><hr>',11),n=[o];function s(l,c,h,m,d,p){return t(),r("div",null,n)}const u=e(a,[["render",s]]);export{f as __pageData,u as default};
